/*
 *  roflkode.jj
 *
 *  JavaCC specification for ROFLKODE.
 */

// GLOBAL OPTIONS

options {
  UNICODE_INPUT = true;
  STATIC = false;
}

// THE PARSER CLASS

PARSER_BEGIN(Parser)

package edu.lmu.cs.xlg.roflkode.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.roflkode.entities.*;

public class Parser {

    /**
     * Returns the result of parsing the ROFLKODE program on the given Reader.
     */
    public Script parse(Reader reader, Log log) {
        try {
            return parseScript();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }
}

PARSER_END(Parser)

// ---------------------------------------------------------------------------
// LEXICAL ANALYZER
// ---------------------------------------------------------------------------

// Whitespace and comments

SKIP: {
    " " | "\t" | <"BTW" (~["\n","\r"])*>
}

TOKEN: {
    "HAI" | "KTHXBYE" | "CAN" | "HAS" | "I" | "A"
|
    < BR: "," | "\n" | "\r" >
|
    < INTLIT: ("-")? (["0"-"9"])+ >
|
    < NUMLIT: ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? >
|
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
    < CHARLIT:
        "'"
        (
            ~["'", ":" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            ":" ( [")", ">", ":", "'", "\""] | <UNICODE_SPEC> )
        )
        "'"
    >
|
    < STRINGLIT:
        "\""
        (
            ~["'", ":" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            ":" ( [")", ">", ":", "'", "\""] | <UNICODE_SPEC> )
        )*
        "\""
    >
|
    < #UNICODE_SPEC:
        "(" (<HEX>)(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)? ")"
    >
|
    < #HEX: ["0"-"9", "A"-"F", "a"-"f"] >
|
    < ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
    < #LETTER: [
        "\u0041"-"\u005a", "\u0061"-"\u007a", "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff",
        "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff", "\uf900"-"\ufaff"
    ] >
|
    < #DIGIT: [
        "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9",
        "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"
    ] >
}

// ---------------------------------------------------------------------------
// SYNTAX ANALYZER
// ---------------------------------------------------------------------------

Script parseScript(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    "HAI"
    (<BR>)+
    ( s = parseStmt() {statements.add(s);} )+
    "KTHXBYE"
    (<BR>)*
    <EOF>
    {return new Script(statements);}
}

Statement parseStmt(): {
}{
    "I"
    (<BR>)+
    {return null;}
}
