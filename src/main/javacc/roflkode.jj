/*
 *  roflkode.jj
 *
 *  JavaCC specification for ROFLKODE.
 */

options {
  UNICODE_INPUT = true;
  STATIC = false;
}

PARSER_BEGIN(Parser)

package edu.lmu.cs.xlg.roflkode.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.roflkode.entities.*;

public class Parser {

    /**
     * Returns the result of parsing the ROFLKODE program on the given Reader.
     */
    public Script parse(Reader reader, Log log) {
        try {
            return parseScript();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }
}

PARSER_END(Parser)

SKIP: {
    " " | "\t" | <"BTW" (~["\n","\r"])*>
}

TOKEN: {
    "HAI" | "KTHXBYE" | "CAN" | "HAS" | "I" | "A" | "R" | "AN" | "YO" | "UR"
    | "UV" | "AKA" | "BRB" | "WIF" | "TEH" | "KAR" | "INT" | "ITZ" | "HWGA"
    | "DIAF" | "MAEK" | "B00L" | "THEM" | "YARN" | "GTFO" | "NUMBR" | "SRSLY"
    | "HEREZ" | "GIMMEH" | "PWNZOR" | "BUKKIT" | "UPZORZ" | "FACEPALM"
    | "NERFZORZ" | "IF" | "CEPT" | "TIL" | "WHIEL" | "NO" | "OIC" | "WTF"
    | "OMG" | "WAI" | "WERD" | "MEBBE" | "OMGWTF" | "O" | "IM" | "IN" | "TO"
    | "UP" | "OR" | "AS" | "BY" | "WIN" | "THX" | "PLZ" | "N00B" | "NERF"
    | "FAIL" | "FROM" | "SAEM" | "NOES" | "PWNS" | "THRU" | "MKAY" | "LIST"
    | "LOL" | "PWNED" | "AWSUM" | "UPPIN" | "NERFIN" | "DIVIDZ" | "BITZLEFT"
    | "BITZRIGHT" | "TIEMZ" | "OVR" | "LEFTOVR" | "NAA" | "BITZFLIP" | "SIEZ"
    | "B00LZOR" | "INTZOR" | "NUMZOR" | "KARZOR" | "YARNZOR" | "BITOR" | "BITAND"
    | "BITXOR" | "ORELSE" | "ANALSO"
|
    "?" | "(" | ")" | "!?" | "?!" | "!!!" | "~~" | "<:" | ":>" | "[:" | ":]" | "(:" | ":)"
|
    < BR: "," | "\n" | "\r" | "\u0085" | "\u2028" | "\u2029" >
|
    < INTLIT: ("-")? (["0"-"9"])+ >
|
    < NUMLIT: ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? >
|
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
    < CHARLIT:
        "'"
        (
            ~["'", ":" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            ":" ( [")", ">", ":", "'", "\""] | <UNICODE_SPEC> )
        )
        "'"
    >
|
    < STRINGLIT:
        "\""
        (
            ~["\"", ":" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            ":" ( [")", ">", ":", "'", "\""] | <UNICODE_SPEC> )
        )*
        "\""
    >
|
    < #UNICODE_SPEC:
        "(" (<HEX>)(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)? ")"
    >
|
    < #HEX: ["0"-"9", "A"-"F", "a"-"f"] >
|
    < ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
    < #LETTER: [
        "\u0041"-"\u005a", "\u0061"-"\u007a", "\u00aa", "\u00b5", "\u00ba", "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6", "\u00f8"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f",
        "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff", "\ufb00"-"\ufb06",
        "\ufb13"-"\ufb17", "\ufb1f"-"\ufb28", "\ufb2a"-"\ufb36", "\ufb38"-"\ufb3e",
        "\ufb40"-"\ufb41", "\ufb43"-"\ufb44", "\ufb46"-"\ufb4f", "\ufb50"-"\ufdd7",
        "\ufdf0"-"\ufdfd", "\ufe70"-"\ufefc", "\uff1f"-"\uff3a", "\uff3f"-"\uff5e",
        "\uff61"-"\uffbe", "\uffc2"-"\uffc7", "\uffca"-"\uffcf", "\uffd2"-"\uffd7",
        "\uffda"-"\uffdc"
    ] >
|
    < #DIGIT: [
        "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f",
        "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"
    ] >
}

Script parseScript(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    (<BR>)*
    "HAI"
    (<BR>)+
    (parseImport())*
    (s = parseStmt() {statements.add(s);})+
    "KTHXBYE"
    (<BR>)*
    <EOF>
    {return new Script(statements);}
}

void parseImport(): {
}{
    "CAN" "HAS" <ID> "?" (<BR>)+
    { /* TODO: Do a compilation of the library file <ID>.rk */ }
}

Statement parseStmt(): {
    Statement s;
}{
    (
        s = parseDec()
    |
        LOOKAHEAD ("PLZ" | "IM" | parseExp() ("?" | "WTF")) s = parseComplexStmt()
    |
        s = parseSimpleStmt()
    )
    (<BR>)+
    {return s;}
}

Statement parseDec(): {
    Statement s;
}{
    (
        LOOKAHEAD(2) s = parseVardec()
    |
        s = parseFundec()
    |
        s = parseTypedec()
    )
    {return s;}
}

Variable parseVardec(): {
    String t = null;
    Token v = null;
    Expression e = null;
    boolean constant = false;
}{
    "I" "HAS" "A"
    (LOOKAHEAD (parseType() <ID>) t = parseType())?
    v = <ID>
    ("ITZ" ("4EVER" {constant = true;})? e = parseExp())?
    {return new Variable(v.image, t, e, constant);}
}

String parseType(): {
    Token i;
    StringBuilder builder = new StringBuilder();
}{
    (
        i = "B00L"
    |
        i = "KAR"
    |
        i = "INT"
    |
        i = "NUMBR"
    |
        i = "YARN"
    |
        i = <ID>
    )
    {builder.append(i.image);}
    (
        LOOKAHEAD(2) "LIST" {builder.append(" LIST");}
    )*
    {return builder.toString();}
}

Type parseTypedec(): {
    Token b;
    String t;
    Token p;
    List<BukkitType.Property> properties = new ArrayList<BukkitType.Property>();
}{
    "TEH" "BUKKIT" "UV" (<BR>)*
    (
        t = parseType()
        p = <ID>
        {properties.add(new BukkitType.Property(p.image, t));} (<BR>)*
    )*
    "AKA" b = <ID>
    {return new BukkitType(b.image, properties);}
}

Function parseFundec(): {
    String r = null;
    Token n;
    String t;
    Token p;
    List<Variable> params = new ArrayList<Variable>();
    Block body = null;
}{
    (
        "I" "CAN" ("MAEK" r = parseType())?
        n = <ID> (parseParams(params))? (<BR>)+
        body = parseBlock()
        "SRSLY"
    |
        "THEM" "CAN" ("MAEK" r = parseType())? n = <ID> (parseParams(params))?
    )
    {return new Function(r, n.image, params, body);}
}

void parseParams(List<Variable> params): {
    String t;
    Token p;
}{
    ("WIF")? "UR" t = parseType() p = <ID>
    {params.add(new Variable(p.image, t, null, false));}
    (
        "AN" t = parseType() p = <ID>
        {params.add(new Variable(p.image, t, null, false));}
    )*
}

Block parseBlock(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    ( s = parseStmt() {statements.add(s);} )*
    {return new Block(statements);}
}

Statement parseSimpleStmt(): {
    Statement s = null;
    List<Expression> expressions = new ArrayList<Expression>();
    Expression e = null;
    VariableExpression v = null;
    Token t = null;
    ModifiedSimpleStatement.Modifier m = null;
    Expression condition = null;
}{
    (
        "YO" (e = parseExp()  {expressions.add(e);})+
        {s = new YoStatement(expressions);}
    |
        "FACEPALM" (e = parseExp()  {expressions.add(e);})+
        {s = new FacepalmStatement(expressions);}
    |
        "UPZORZ" v = parseVar()
        {s = new UpzorzStatement(v);}
    |
        "NERFZORZ" v = parseVar()
        {s = new NerfzorzStatement(v);}
    |
        "GTFO" (t = <ID>)?
        {s = new GtfoStatement(t == null ? null : t.image);}
    |
        "HWGA" (t = <ID>)?
        {s = new AgainStatement(t == null ? null : t.image);}
    |
        "HEREZ" "UR" e = parseExp()
        {s = new HerezStatement(e);}
    |
        "DIAF" (e = parseExp())?
        {s = new DiafStatement(e);}
    |
        "GIMMEH" v = parseVar()
        {s = new GimmehStatement(v);}
    |
        "BRB" (e = parseExp())
        {s = new BrbStatement(e);}
    |
        LOOKAHEAD (parseVar() "R") v = parseVar() "R" e = parseExp()
        {s = new AssignmentStatement(v, e);}
    |
        t = <ID> expressions = parseArgs()
        {s = new CallStatement(t.image, expressions);}
    )
    (
        (
            "IF" {m = ModifiedSimpleStatement.Modifier.IF;}
        |
            "CEPT" "IF" {m = ModifiedSimpleStatement.Modifier.CEPT;}
        |
            "WHIEL" {m = ModifiedSimpleStatement.Modifier.WHIEL;}
        |
            "TIL" {m = ModifiedSimpleStatement.Modifier.TIL;}
        )
        condition = parseExp()
    )?
    {return m == null ? s : new ModifiedSimpleStatement(m, condition, s);}
}

Statement parseComplexStmt(): {
    Statement s;
}{
    (
        LOOKAHEAD(parseExp() "?") s = parseConditional()
    |
        s = parseSwitch()
    |
        s = parseLoop()
    |
        s = parseTry()
    )
    {return s;}
}

Statement parseConditional(): {
    ConditionalStatement.Arm arm;
    List<ConditionalStatement.Arm> arms = new ArrayList<ConditionalStatement.Arm>();
    Expression e;
    Block b;
    Block elseBlock = null;
}{
    e = parseExp() "?" (<BR>)+
    "WERD" (<BR>)+ b = parseBlock()
    {arms.add(new ConditionalStatement.Arm(e, b));}
    (
        "MEBBE" e = parseExp() (<BR>)*
        b = parseBlock()
        {arms.add(new ConditionalStatement.Arm(e, b));}
    )*
    (
        "NO" "WAI" (<BR>)*
        elseBlock = parseBlock()
    )?
    "OIC"
    {return new ConditionalStatement(arms, elseBlock);}
}

Statement parseSwitch(): {
    Expression e;
    SwitchStatement.Arm arm;
    List<SwitchStatement.Arm> arms = new ArrayList<SwitchStatement.Arm>();
    Literal literal;
    Block block;
    Block elseBlock = null;
}{
    e = parseExp() "WTF" "?" (<BR>)+
    (
        "OMG" literal = parseLiteral() (<BR>)+ block = parseBlock()
        {arms.add(new SwitchStatement.Arm(literal, block));}
    )+
    "OMGWTF" (<BR>)+
    elseBlock = parseBlock()
    "OIC"
    {return new SwitchStatement(e, arms, elseBlock);}
}

Statement parseLoop(): {
    Token t = null;
    String name = null;
    String loopType;
    Expression condition = null;
    String iterator = null;
    Expression start = null;
    Expression end = null;
    Expression collection = null;
    Block body;
}{
    "IM" "IN" "UR" t = <ID> {name = t.image;} (<BR>)*
    (
        (t = "WHIEL" | t = "TIL") {loopType = t.image;} condition = parseExp()
    |
        (t = "UPPIN" | t = "NERFIN") {loopType = t.image;}
        t = <ID> {iterator = t.image;}
        (
            "FROM" start = parseExp() "TO" end = parseExp()
        |
            "THRU" collection = parseExp()
        )
    )
    (<BR>)+
    body = parseBlock()
    "LOL"
    {return new LoopStatement(name, loopType, condition, iterator, start, end, collection, body);}
}

Statement parseTry(): {
    Statement statementToTry;
    Block success;
    Block fail;
}{
    "PLZ" statementToTry = parseSimpleStmt()
    (<BR>)+
    "AWSUM" "THX" (<BR>)+
    success = parseBlock()
    "O" "NOES" (<BR>)+
    fail = parseBlock()
    "MKAY"
    {return new TryStatement(statementToTry, success, fail);}
}

Expression parseExp(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp1()
    ("ORELSE" e2 = parseExp1() {e1 = new BinaryExpression(e1, "ORELSE", e2);})*
    {return e1;}
}

Expression parseExp1(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp2()
    ("ANALSO" e2 = parseExp2() {e1 = new BinaryExpression(e1, "ANALSO", e2);})*
    {return e1;}
}

Expression parseExp2(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp3()
    ("BITOR" e2 = parseExp3() {e1 = new BinaryExpression(e1, "BITOR", e2);})*
    {return e1;}
}

Expression parseExp3(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp4()
    ("BITXOR" e2 = parseExp4() {e1 = new BinaryExpression(e1, "BITXOR", e2);})*
    {return e1;}
}

Expression parseExp4(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp5()
    ("BITAND" e2 = parseExp5() {e1 = new BinaryExpression(e1, "BITAND", e2);})*
    {return e1;}
}

Expression parseExp5(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = parseExp6()
    (
        op = parseRelop()
        e2 = parseExp6()
        {e1 = new BinaryExpression(e1, op, e2);}
    )?
    {return e1;}
}

Expression parseExp6(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = parseExp7()
    (
        op = parseShiftop()
        e2 = parseExp7()
        {e1 = new BinaryExpression(e1, op, e2);}
    )*
    {return e1;}
}

Expression parseExp7(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = parseExp8()
    (
        op = parseAddop()
        e2 = parseExp8()
        {e1 = new BinaryExpression(e1, op, e2);}
    )*
    {return e1;}
}

Expression parseExp8(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = parseExp9()
    (
        op = parseMulop()
        e2 = parseExp9()
        {e1 = new BinaryExpression(e1, op, e2);}
    )*
    {return e1;}
}

Expression parseExp9(): {
    String op = null;
    Expression e;
}{
    (op = parsePrefixop())? e = parseExp10()
    {return op == null ? e : new UnaryExpression(op, e);}
}

Expression parseExp10(): {
    Expression e;
    List<Expression> list = new ArrayList<Expression>();
    Token t;
}{
    e = parseLiteral() {return e;}
|
    LOOKAHEAD(2) t = <ID> "<:" (e = parseExp()  {list.add(e);})* ":>"
    {return new BukkitExpression(t.image, list);}
|
    e = parseVar() {return e;}
|
    "[:" (e = parseExp()  {list.add(e);})* ":]"
    {return new ArrayExpression(list);}
|
    "(" e = parseExp() ")" {return e;}
}

Literal parseLiteral(): {
    Token t;
}{
    "N00B" {return NoobLiteral.INSTANCE;}
|
    "WIN" {return BooleanLiteral.WIN;}
|
    "FAIL" {return BooleanLiteral.FAIL;}
|
    t = <INTLIT> {return new IntegerLiteral(t.image);}
|
    t = <NUMLIT> {return new NumberLiteral(t.image);}
|
    t = <CHARLIT> {return new KarLiteral(t.image);}
|
    t = <STRINGLIT> {return new StringLiteral(t.image);}
}

VariableExpression parseVar(): {
    VariableExpression v;
    List<Expression> arguments = new ArrayList<Expression>();
    Expression e;
    Token t;
    Token p;
}{
    t = <ID>
    (arguments = parseArgs())?
    {
        if (arguments.isEmpty()) {
            v = new SimpleVariableExpression(t.image);
        } else {
            v = new CallExpression(t.image, arguments);
        }
    }
    (
        "!?" e = parseExp() "?!"
        {v = new IndexVariableExpression(v, e);}
    |
        "!!!" p = <ID>
        {v = new PropertyVariableExpression(v, p.image);}
    )*
    {return v;}
}

List<Expression> parseArgs(): {
    List<Expression> arguments = new ArrayList<Expression>();
    Expression e;
}{
    "(:" (e = parseExp()  {arguments.add(e);})* ":)"
    {return arguments;}
}

String parseRelop(): {
}{
    LOOKAHEAD(2) "PWNS" "OR" "SAEM" "AS" {return ">=";}
    |
    "PWNS" {return ">";}
    |
    LOOKAHEAD(3) "PWNED" "BY" "OR" "SAEM" "AS" {return "<=";}
    |
    "PWNED" "BY" {return "<";}
    |
    "SAEM" "AS" {return "==";}
    |
    "DIVIDZ" {return "\\";}
}

String parseShiftop(): {
    Token t;
}{
    (
        t = "BITZLEFT" {return "<<";}
    |
        t = "BITZRIGHT" {return ">>";}
    )
}

String parseAddop(): {
    Token t;
}{
    t = "UP" {return "+";}
    |
    t = "NERF" {return "-";}
    |
    t = "~~" {return "~~";}
}

String parseMulop(): {
    Token t;
}{
    (
        t = "TIEMZ" {return "*";}
    |
        t = "OVR" {return "/";}
    |
        t = "LEFTOVR" {return "%";}
    )
}

String parsePrefixop(): {
    Token t;
}{
    (
        t = "NAA"
    |   t = "BITZFLIP"
    |   t = "SIEZ" "UV"
    |   t = "B00LZOR"
    |   t = "INTZOR"
    |   t = "NUMZOR"
    |   t = "KARZOR"
    |   t = "YARNZOR"
    )
    {return t.image;}
}
