/*
 *  roflkode.jj
 *
 *  JavaCC specification for ROFLKODE.
 */

options {
  UNICODE_INPUT = true;
  STATIC = false;
}

PARSER_BEGIN(Parser)

package edu.lmu.cs.xlg.roflkode.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.roflkode.entities.*;

public class Parser {

    /**
     * Returns the result of parsing the ROFLKODE program on the given Reader.
     */
    public Script parse(Reader reader, Log log) {
        try {
            return parseScript();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }
}

PARSER_END(Parser)

SKIP: {
    " " | "\t" | <"BTW" (~["\n","\r"])*>
}

TOKEN: {
    "HAI" | "KTHXBYE" | "CAN" | "HAS" | "I" | "A" | "R" | "AN" | "YO" | "YR"
    | "UV" | "AKA" | "BRB" | "WIF" | "TEH" | "KAR" | "INT" | "ITZ" | "HWGA"
    | "DIAF" | "MAEK" | "B00L" | "THEM" | "YARN" | "GTFO" | "NUMBR" | "SRSLY"
    | "HEREZ" | "GIMMEH" | "PWNZOR" | "BUKKIT" | "UPZORZ" | "FACEPALM"
    | "NERFZORZ" | "IF" | "CEPT" | "TIL" | "WHIEL" | "NO" | "OIC" | "WTF"
    | "OMG" | "WAI" | "WERD" | "MEBBE" | "OMGWTF" | "O" | "IM" | "IN" | "TO"
    | "UP" | "OR" | "AS" | "BY" | "WIN" | "THX" | "PLZ" | "N00B" | "NERF"
    | "FAIL" | "FROM" | "SAEM" | "NOES" | "PWNS" | "LIST" | "THRU" | "MKAY"
    | "OUTTA" | "PWNED" | "AWSUM" | "UPPIN" | "NERFIN" | "DIVIDZ" | "BITZLEFT"
    | "BITZRIGHT" | "TIEMZ" | "OVR" | "LEFTOVR" | "NAA" | "BITZFLIP" | "SIEZ"
    | "B00LZOR" | "INTZOR" | "NUMZOR" | "KARZOR" | "YARNZOR" | "BITOR" | "BITAND"
    | "BITXOR" | "CATN8" | "ORELSE" | "ANALSO"
|
    "?" | "!!" | "!!!"
|
    < BR: "," | "\n" | "\r" >
|
    < INTLIT: ("-")? (["0"-"9"])+ >
|
    < NUMLIT: ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? >
|
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
    < CHARLIT:
        "'"
        (
            ~["'", ":" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            ":" ( [")", ">", ":", "'", "\""] | <UNICODE_SPEC> )
        )
        "'"
    >
|
    < STRINGLIT:
        "\""
        (
            ~["'", ":" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            ":" ( [")", ">", ":", "'", "\""] | <UNICODE_SPEC> )
        )*
        "\""
    >
|
    < #UNICODE_SPEC:
        "(" (<HEX>)(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)? ")"
    >
|
    < #HEX: ["0"-"9", "A"-"F", "a"-"f"] >
|
    < ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
    < #LETTER: [
        "\u0041"-"\u005a", "\u0061"-"\u007a", "\u00aa", "\u00b5", "\u00ba", "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6", "\u00f8"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f",
        "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff", "\ufb00"-"\ufb06",
        "\ufb13"-"\ufb17", "\ufb1f"-"\ufb28", "\ufb2a"-"\ufb36", "\ufb38"-"\ufb3e",
        "\ufb40"-"\ufb41", "\ufb43"-"\ufb44", "\ufb46"-"\ufb4f", "\ufb50"-"\ufdd7",
        "\ufdf0"-"\ufdfd", "\ufe70"-"\ufefc", "\uff1f"-"\uff3a", "\uff3f"-"\uff5e",
        "\uff61"-"\uffbe", "\uffc2"-"\uffc7", "\uffca"-"\uffcf", "\uffd2"-"\uffd7",
        "\uffda"-"\uffdc"
    ] >
|
    < #DIGIT: [
        "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f",
        "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"
    ] >
}

Script parseScript(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    "HAI"
    (<BR>)+
    (parseImport())*
    (parseStmt())+
    "KTHXBYE"
    (<BR>)*
    <EOF>
    {return new Script(null);}
}

void parseImport(): {
}{
    "CAN" "HAS" <ID> "?" (<BR>)+
}

void parseStmt(): {
}{
    (
        parseDec()
    |
        parseSimpleStmt()
        (parseModifier())?
    |
        parseComplexStmt()
    )
    (<BR>)+
}

void parseDec(): {
}{
    LOOKAHEAD(2) parseVardec()
    |
    parseTypedec()
    |
    parseFundec()
}

void parseVardec(): {
}{
    "I" "HAS" "A" parseType() <ID>
    ("ITZ" "4EVER" parseExp())?
}

void parseType(): {
}{
    "B00L" | "KAR" | "INT" | "NUMBR" | "YARN" | <ID>
}

void parseTypedec(): {
}{
    "TEH" "BUKKIT" "UV" (<BR>)*
    (parseType() <ID> (<BR>)*)*
    "AKA" <ID>
}

void parseFundec(): {
}{
    "I" "CAN" ("MAEK" parseType())?
    <ID> (parseParams())? (<BR>)+ (parseStmt())+
    "SRSLY"
    |
    "THEM" "CAN" ("MAEK" parseType())? <ID> (parseParams())?
}

void parseParams(): {
}{
    ("WIF")? "YR" parseType() <ID>
    ("AN" parseType() <ID>)*
}

void parseSimpleStmt(): {
}{
    "YO" (parseExp())+
    |
    "FACEPALM" (parseExp())+
    |
    "PWNZOR" <ID>
    |
    "UPZORZ" <ID>
    |
    "NERFZORZ" <ID>
    |
    LOOKAHEAD(parseVar() "R") parseVar() "R" parseExp()
    |
    "GTFO" (<ID>)?
    |
    "HWGA" (<ID>)?
    |
    "HEREZ" "YR" parseExp()
    |
    "DIAF" (parseExp())?
    |
    "GIMMEH" (<ID>)
    |
    "BRB" (parseExp())
    |
    <ID> (parseExp())*
}

void parseModifier(): {
}{
    (
        "IF"
    |
        "CEPT" "IF"
    |
        "WHIEL"
    |
        "TIL"
    )
    parseExp()
}

void parseComplexStmt(): {
}{
    LOOKAHEAD(parseExp() "?") parseConditional()
    |
    parseSwitch()
    |
    parseLoop()
    |
    parseTry()
}

void parseConditional(): {
}{
    parseExp() "?" (<BR>)+
    "WERD" (<BR>)+ (parseStmt())+
    (
        "MEBBE" parseExp() (<BR>)*
        (parseStmt())+
    )*
    (
        "NO" "WAI" (<BR>)*
        (parseStmt())+
    )?
    "OIC"
}

void parseSwitch(): {
}{
    parseExp() "WTF" "?" (<BR>)+
    (
        "OMG" parseLiteral() (<BR>)+ (parseStmt())+
    )+
    "OMGWTF" (<BR>)+
    (parseStmt())+
    "OIC"
}

void parseLoop(): {
}{
    parseLoopStart() (<BR>)+
    parseLoopControl() (<BR>)*
    (LOOKAHEAD(2) parseStmt())+
    parseLoopEnd()
}

void parseLoopStart(): {
}{
    "IM" "IN" "YR" <ID>
}

void parseLoopControl(): {
}{
    ("WHIEL" | "TIL") parseExp()
    |
    ("UPPIN" | "NERFIN")
    <ID>
    (
        "FROM" parseExp() "TO" parseExp()
    |
        "THRU" parseExp()
    )
}

void parseLoopEnd(): {
}{
    "IM" "OUTTA" "YR" <ID>
}

void parseTry(): {
}{
    "PLZ" parseSimpleStmt()
    (<BR>)+
    "AWSUM" "THX" (<BR>)+
    (parseStmt())+
    "O" "NOES" (<BR>)+
    (parseStmt())+
    "MKAY"
}

void parseExp(): {
}{
    parseExp1()
    (
        "ORELSE"
        parseExp1()
    )*
}

void parseExp1(): {
}{
    parseExp2()
    (
        "ANALSO"
        parseExp2()
    )*
}

void parseExp2(): {
}{
    parseExp3()
    (
        "BITOR"
        parseExp3()
    )*
}

void parseExp3(): {
}{
    parseExp4()
    (
        "BITXOR"
        parseExp4()
    )*
}

void parseExp4(): {
}{
    parseExp5()
    (
        "BITAND"
        parseExp5()
    )*
}

void parseExp5(): {
}{
    parseExp6()
    (
        parseRelop()
        parseExp6()
    )?
}

void parseExp6(): {
}{
    parseExp7()
    (
        parseShiftop()
        parseExp7()
    )*
}

void parseExp7(): {
}{
    parseExp8()
    (
        parseAddop()
        parseExp8()
    )*
}

void parseExp8(): {
}{
    parseExp9()
    (
        parseMulop()
        parseExp9()
    )*
}

void parseExp9(): {
}{
    (parsePrefixop())?
    parseExp10()
}

void parseExp10(): {
}{
    parseLiteral()
    |
    parseVar()
    |
  //  "CATN8" (parseExp())+
   // |
    "(" parseExp() ")"
}

void parseLiteral(): {
}{
    "N00B"
|
    "WIN"
|
    "FAIL"
|
    <INTLIT>
|
    <NUMLIT>
|
    <CHARLIT>
|
    <STRINGLIT>
}

void parseVar(): {
}{
    <ID> ("LIST")* (parseExp())*
    (
        "!!" parseExp()
    |
        "!!!" <ID>
    )*
}

void parseRelop(): {
}{
    LOOKAHEAD(2) "PWNS" "OR" "SAEM" "AS"
    |
    "PWNS"
    |
    LOOKAHEAD(2) "PWNED" "BY" "OR" "SAEM" "AS"
    |
    "PWNED" "BY"
    |
    "SAEM" "AS"
    |
    "DIVIDZ"
}

void parseShiftop(): {
}{
    "BITZLEFT" | "BITZRIGHT"
}

void parseAddop(): {
}{
    "UP" | "NERF"
}

void parseMulop(): {
}{
    "TIEMZ" | "OVR" | "LEFTOVR"
}

void parsePrefixop(): {
}{
    "NAA" | "BITZFLIP" | "SIEZ" "UV" | "B00LZOR" | "INTZOR" | "NUMZOR" | "KARZOR" | "YARNZOR"
}
